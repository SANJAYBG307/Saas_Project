version: '3.8'

services:
  # Database service
  db:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_DATABASE: saas_platform
      MYSQL_USER: saas_user
      MYSQL_PASSWORD: saas_password
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - saas_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis service (for caching and background tasks)
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - saas_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Web application service
  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    restart: always
    ports:
      - "8000:8000"
    environment:
      # Django settings
      DEBUG: "False"
      SECRET_KEY: "docker-secret-key-change-in-production"

      # Database settings
      DB_HOST: db
      DB_NAME: saas_platform
      DB_USER: saas_user
      DB_PASSWORD: saas_password
      DB_PORT: 3306

      # Redis settings
      REDIS_URL: "redis://redis:6379/0"

      # Email settings (configure with your SMTP)
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_USE_TLS: "True"
      EMAIL_HOST_USER: ""
      EMAIL_HOST_PASSWORD: ""

      # Stripe settings (add your keys)
      STRIPE_PUBLISHABLE_KEY: ""
      STRIPE_SECRET_KEY: ""

      # Production settings
      ALLOWED_HOSTS: "localhost,127.0.0.1"

    volumes:
      - static_volume:/app/backend/staticfiles
      - media_volume:/app/backend/media

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

    networks:
      - saas_network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/login/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates (if you have them)
    depends_on:
      - web
    networks:
      - saas_network

  # Background worker for Celery (optional)
  celery:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    restart: always
    command: celery -A saas_platform worker -l info
    environment:
      # Same environment variables as web service
      DEBUG: "False"
      SECRET_KEY: "docker-secret-key-change-in-production"
      DB_HOST: db
      DB_NAME: saas_platform
      DB_USER: saas_user
      DB_PASSWORD: saas_password
      DB_PORT: 3306
      REDIS_URL: "redis://redis:6379/0"

    volumes:
      - media_volume:/app/backend/media

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

    networks:
      - saas_network

  # Celery Beat scheduler (optional)
  celery-beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    restart: always
    command: celery -A saas_platform beat -l info
    environment:
      # Same environment variables as web service
      DEBUG: "False"
      SECRET_KEY: "docker-secret-key-change-in-production"
      DB_HOST: db
      DB_NAME: saas_platform
      DB_USER: saas_user
      DB_PASSWORD: saas_password
      DB_PORT: 3306
      REDIS_URL: "redis://redis:6379/0"

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

    networks:
      - saas_network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  saas_network:
    driver: bridge